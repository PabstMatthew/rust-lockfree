#!/usr/bin/env python3
import sys, os
import re
import subprocess
import numpy as np
import pandas as pd

from statistics import mean
from tqdm import tqdm
from itertools import product

# N   = times to run for each measurement
# CUT = outliers to cut from both ends
TIME_PROG, MODE, N, CUT = [None] * 4

IMPLS = [
    "mutex",
    "spin",
    "lockfree",
    "crossbeam",
    "dirty",
    "epoch"
]

BENCHS = [
    "read",
    "write",
    "mixed",
    "mem",
]

NTHREADS = list(range(2, 18, 2))

def run(cmd):
    cmd = cmd.strip()
    result = subprocess.run(cmd.split(),
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)
    stdout = result.stdout.decode("utf-8").strip()
    stderr = result.stderr.decode("utf-8").strip()

    if result.returncode != 0:
        write("\nCommand '{}' returned exit code {}\n{}\n{}\n".format(cmd,
            result.returncode, stdout, stderr))
        sys.exit(1)
    return stdout, stderr

def handle_cli():
    global TIME_PROG, MODE, N, CUT, NTHREADS

    # /usr/bin/time is needed for memory usage
    # This is different than shell function time()
    TIME_PROG = run("which time")[0]

    if len(sys.argv) > 1 and sys.argv[1] == "--release":
        print("Running in release mode (takes ~10m)")
        run("cargo build --release")
        MODE = "release"
        N = 6
        CUT = 1
    else:
        print("Running in fast mode (takes ~1m)")
        print("Use --release for more accuracy and different numbers of threads")
        run("cargo build")
        MODE = "debug"
        N = 1
        CUT = 0
        NTHREADS = [16]

    print(" - Running {} time(s)\n"
          " - Removing {} outliers from each end\n".format(N, CUT))

def get_time(impl, bench, nthreads):
    cmd = ("{} -f \"%M\" ./target/{}/rust-lockfree "
           "-i {} -b {} -n {} -v 0").format(
                TIME_PROG,
                MODE,
                impl,
                bench,
                nthreads)

    stdout, stderr = run(cmd)

    time, mem = -1, int(stderr.strip("\""))
    for l in stdout.strip().split("\n"):
        ints = [int(s) for s in l.split() if s.isdigit()]
        if "Completed" in l:
            time = ints[0]

    return time, mem

def get_avg_time(impl, bench, nthreads):
    times, mems = [], []
    for _ in range(N):
        t, m = get_time(impl, bench, nthreads)
        times.append(t)
        mems.append(m)

    if CUT > 0:
        times = sorted(times)[CUT:-CUT]
        mems = sorted(mems)[CUT:-CUT]

    return mean(times), mean(mems)

def measure_times():
    rows = []
    for bench, impl, n in tqdm(list(product(BENCHS, IMPLS, NTHREADS))):
        time, mem = get_avg_time(impl, bench, n)
        rows.append((bench, impl, n, time, mem))

    df = pd.DataFrame(np.array(rows),
        columns=["Benchmark",
            "Implementation",
            "Threads",
            "Time",
            "Memory",
        ])
    return df

if __name__ == '__main__':
    handle_cli()

    df = measure_times()
    print(df)
    print("Time is in ms, peak memory usage is in KB.")
    df.to_csv("times.csv", index=False)
